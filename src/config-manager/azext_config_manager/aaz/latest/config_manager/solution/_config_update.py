# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

import os
import platform
import subprocess
import tempfile
import tkinter as tk
import tkinter.scrolledtext as scrolledtext
# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "config-manager solution config set",
    is_preview=True,
)
class Update3(AAZCommand):
    """Set the config values for solution
    """

    _aaz_info = {
        "version": "2024-08-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/Microsoft.Edge/solutions/{}/versions/{}", "2024-08-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.solution_name = AAZStrArg(
            options=["--solution-name"],
            help="The name of the Solution",
            # required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]{3,24}$",
            ),
        )

        _args_schema = cls._args_schema
        _args_schema.level_name = AAZStrArg(
            options=["--name"],
            help="The name of level at which value needs to be set.",

            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]{3,24}$",
            ),
        )

        # define Arg Group "Resource"

        _args_schema = cls._args_schema
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Resource",
            help="Resource tags.",
            nullable=True,
        )

        _args_schema.properties = AAZFreeFormDictArg(
            options=["--properties"],
            arg_group="Resource",
            help="The resource-specific properties for this resource.",
            nullable=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        config_name = str(self.ctx.args.level_name)
        if len(config_name) > 18:
            config_name = config_name[:18] + "Config"
        else:
            config_name = config_name + "Config"
        self.ctx.args.level_name = config_name
        self.SolutionConfigAtDtGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.DtConfigUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result


    class SolutionConfigAtDtGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configurations/{configName}/DynamicConfigurations/{solutionName}/versions/version1",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            sol_name = "common"
            if has_value(self.ctx.args.solution_name):
                sol_name = self.ctx.args.solution_name

            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "solutionName", sol_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "configName", self.ctx.args.level_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-06-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_solution_version_read(cls._schema_on_200)

            return cls._schema_on_200


    class DtConfigUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configurations/{configName}/DynamicConfigurations/{solutionName}/versions/version1",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            sol_name = "common"
            if has_value(self.ctx.args.solution_name):
                sol_name = self.ctx.args.solution_name

            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "solutionName", sol_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "configName", self.ctx.args.level_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-06-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_solution_version_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            root = tk.Tk()
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            def get_input():
                updatedPaload = txt.get(1.0, tk.END + "-1c")
                # print(result)
                root.destroy()

                # _builder.set_const("kind", "Helm", AAZStrType, typ_kwargs={"flags": {"required": True}})
                _builder.set_prop("properties", AAZFreeFormDictType, ".properties")

                # _builder.discriminate_by("kind", "Helm")

                properties = _builder.get(".properties")

                if properties is not None:
                    properties.set_anytype_elements(".")

                # _instance_value["properties"]["helmChartUri"] = self.ctx.args.helm_uri
                # _instance_value["properties"]["helmChartVersion"] = self.ctx.args.helm_chart_version
                _instance_value["properties"]["values"] = updatedPaload

            root.protocol("WM_DELETE_WINDOW", lambda : get_input())
            root.title(str(self.ctx.args.solution_name))
            # T = tk.Text(root, height=5, width=40)
            txt = scrolledtext.ScrolledText(root, undo=True)
            txt['font'] = ('consolas', '12')
            txt.pack(expand=True, fill='both')
            # root.geometry("250x170")
            # scroll_bar = tk.Scrollbar(root)
            # scroll_bar.pack(side=tk.RIGHT)

            # T.pack(side=tk.LEFT)
            # l = tk.Label(root, text=instance["name"])
            # l.config(font=("Courier", 14))
            content = instance["properties"]["values"]
            # b2 = tk.Button(root, text="Save",
            #              command=lambda: get_input())
            # l.pack()
            # T.pack()
            # b1.pack()
            # b2.pack()

            # Insert The Fact.
            txt.insert(tk.END, content)

            tk.mainloop()



            # editor = "vi"
            #
            # if platform.system() == "Windows":
            #     editor = "notepad"
            # temp_file = tempfile.NamedTemporaryFile(delete=False)
            # temp_file.write(bytes(str(instance["properties"]["values"]), "utf-8"))
            # temp_file.close()
            # editor_output = subprocess.run([editor, temp_file.name], stdout=sys.stdout, stdin=sys.stdin,
            #                                stderr=sys.stdout, check=False)
            # if editor_output.returncode != 0:
            #     os.unlink(temp_file.name)
            #     raise CLIInternalError("Failed to update instance")
            # with open(temp_file.name, "rb") as f:
            #     updatedPaload = f.read().decode("utf-8")
            # os.unlink(temp_file.name)


            return _instance_value



    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    _schema_solution_version_read = None

    @classmethod
    def _build_schema_solution_version_read(cls, _schema):
        if cls._schema_solution_version_read is not None:
            _schema.id = cls._schema_solution_version_read.id
            # _schema.kind = cls._schema_solution_version_read.kind
            _schema.name = cls._schema_solution_version_read.name
            _schema.properties = cls._schema_solution_version_read.properties
            _schema.system_data = cls._schema_solution_version_read.system_data
            _schema.type = cls._schema_solution_version_read.type
            # _schema.discriminate_by(
            #     "kind",
            #     "Helm",
            #     cls._schema_solution_version_read.discriminate_by(
            #         "kind",
            #         "Helm",
            #     )
            # )
            return

        cls._schema_solution_version_read = _schema_solution_version_read = AAZObjectType()

        solution_version_read = _schema_solution_version_read
        solution_version_read.id = AAZStrType(
            flags={"read_only": True},
        )
        solution_version_read.kind = AAZStrType(
            flags={"required": True},
        )
        solution_version_read.name = AAZStrType(
            flags={"read_only": True},
        )
        solution_version_read.properties = AAZFreeFormDictType()
        solution_version_read.system_data = AAZObjectType(
            serialized_name="systemData",
            flags={"read_only": True},
        )
        solution_version_read.type = AAZStrType(
            flags={"read_only": True},
        )

        system_data = _schema_solution_version_read.system_data
        system_data.created_at = AAZStrType(
            serialized_name="createdAt",
        )
        system_data.created_by = AAZStrType(
            serialized_name="createdBy",
        )
        system_data.created_by_type = AAZStrType(
            serialized_name="createdByType",
        )
        system_data.last_modified_at = AAZStrType(
            serialized_name="lastModifiedAt",
        )
        system_data.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        system_data.last_modified_by_type = AAZStrType(
            serialized_name="lastModifiedByType",
        )

        _schema.id = cls._schema_solution_version_read.id
        # _schema.kind = cls._schema_solution_version_read.kind
        _schema.name = cls._schema_solution_version_read.name
        _schema.properties = cls._schema_solution_version_read.properties
        _schema.system_data = cls._schema_solution_version_read.system_data
        _schema.type = cls._schema_solution_version_read.type
        # _schema.discriminate_by(
        #         "kind",
        #         "Helm",
        #         cls._schema_solution_version_read.discriminate_by(
        #             "kind",
        #             "Helm",
        #         )
        #     )


__all__ = ["Update3"]
