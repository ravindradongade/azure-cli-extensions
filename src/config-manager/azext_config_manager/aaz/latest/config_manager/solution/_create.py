# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa
import json
from azure.cli.core.aaz import *


@register_command(
    "config-manager solution helm create",
    is_preview=True,
)
class Create(AAZCommand):
    """To create a Solution
    """

    _aaz_info = {
        "version": "2024-08-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/Microsoft.Edge/solutions/{}", "2024-08-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.solution_name = AAZStrArg(
            options=["-n", "--name", "--solution-name"],
            help="The name of the Solution",
            id_part="name",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]{3,24}$",
            ),
        )
        _args_schema.solution_version_name = AAZStrArg(
            options=["-v", "--version", "--solution-version"],
            help="The version of the solution",
            arg_group="Properties",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[0-9]+\\.[0-9]+\\.[0-9]+$",
            ),
        )

        _args_schema = cls._args_schema
        _args_schema.capabilities = AAZStrArg(
            options=["--capabilities"],
            arg_group="Properties",
            required=True,
            help="List of capabilities in comma separated format",
        )
        _args_schema.description = AAZStrArg(
            options=["--description"],
            arg_group="Properties",
            required=True,
            help="Description of solution",
        )
        _args_schema = cls._args_schema
        _args_schema.helm_uri = AAZStrArg(
            options=["--chart"],
            arg_group="Properties",
            required=True,
            help="Helm chart URI",
        )

        _args_schema = cls._args_schema
        _args_schema.helm_chart_version = AAZStrArg(
            options=["--chart-version"],
            arg_group="Properties",
            required=True,
            help="Helm chart version",
        )

        _args_schema = cls._args_schema
        _args_schema.config_template = AAZFileArg(
            options=["--config-template"],
            arg_group="Properties",
            required=True,
            help="Absolute path of config template file",
        )

        # capabilities = cls._args_schema.capabilities
        # capabilities.Element = AAZObjectArg()
        #
        # _element = cls._args_schema.capabilities.Element
        # _element.description = AAZStrArg(
        #     options=["description"],
        #     help="Description of capability",
        #     required=True,
        # )
        # _element.name = AAZStrArg(
        #     options=["name"],
        #     help="Name of capability",
        #     required=True,
        # )

        # _args_schema = cls._args_schema
        # _args_schema.helm = AAZObjectArg(
        #     options=["--helm"],
        #     arg_group="Resource",
        #     help="Helm chart deployment",
        #     required=True,
        #     blank={},
        # )
        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Resource",
            help="The geo-location where the resource lives",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Resource",
            help="Resource tags.",
        )

        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        # config_template = self.ctx.args.config_template
        # with open(str(config_template), "r", encoding="utf8") as file:
        #     content = file.read()
        #     # print(content)
        #     self.ctx.args.config_template = content
        yield self.SolutionsCreateOrUpdate(ctx=self.ctx)()
        yield self.SolutionVersionsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class SolutionsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutions/{solutionName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "solutionName", self.ctx.args.solution_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-08-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType)
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            caps = []
            for capability in str(self.ctx.args.capabilities).split(","):
                caps.append({
                    "name": capability,
                    "description": capability
                })

            if properties is not None:
                properties.set_prop("description", AAZStrType, ".description", typ_kwargs={"flags": {"required": True}})

                # properties.set_const("capabilities", caps, AAZListType,
                #                     typ_kwargs={"flags": {"required": True}})


            # capabilities = _builder.get(".properties.capabilities")
            # if capabilities is not None:
            #     capabilities.set_elements(AAZObjectType, ".")
            #
            # _elements = _builder.get(".properties.capabilities[]")
            # if _elements is not None:
            #     _elements.set_prop("description", AAZStrType, ".description", typ_kwargs={"flags": {"required": True}})
            #     _elements.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            content = self.serialize_content(_content_value)
            content["properties"]["capabilities"] = caps
            return content

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType()
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.capabilities = AAZListType(
                flags={"required": True},
            )
            properties.configuration_links = AAZListType(
                serialized_name="configurationLinks",
                flags={"read_only": True},
            )
            properties.current_version = AAZStrType(
                serialized_name="currentVersion",
                flags={"read_only": True},
            )
            properties.description = AAZStrType(
                flags={"required": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )

            capabilities = cls._schema_on_200_201.properties.capabilities
            capabilities.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.capabilities.Element
            _element.description = AAZStrType(
                flags={"required": True},
            )
            _element.name = AAZStrType(
                flags={"required": True},
            )

            configuration_links = cls._schema_on_200_201.properties.configuration_links
            configuration_links.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.configuration_links.Element
            _element.configuration_id = AAZStrType(
                serialized_name="configurationId",
                flags={"required": True},
            )
            _element.hierarchy_type = AAZStrType(
                serialized_name="hierarchyType",
                flags={"required": True},
            )

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201

    class SolutionVersionsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutions/{solutionName}/versions/{solutionVersionName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "solutionName", self.ctx.args.solution_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "solutionVersionName", self.ctx.args.solution_version_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-08-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_const("kind", "Helm", AAZStrType, typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType)
            # _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("helmChartUri", AAZStrType, ".helm_uri", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("helmChartVersion", AAZStrType, ".helm_chart_version", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("configurationTemplate", AAZStrType, ".config_template",
                                    typ_kwargs={"flags": {"required": True}})
            # _builder.discriminate_by("kind", "Helm")



            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            versionInResp = data["name"]
            data["name"] = str(self.ctx.args.solution_name)
            data["version"] = versionInResp

            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.kind = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.version = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZFreeFormDictType()
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
