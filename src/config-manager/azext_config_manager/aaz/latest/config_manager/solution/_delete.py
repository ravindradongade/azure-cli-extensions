# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "config-manager solution delete",
    is_preview=True,
    confirmation="Are you sure you want to perform this operation?",
)
class Delete(AAZCommand):
    """To delete a Solution
    """

    _aaz_info = {
        "version": "2024-08-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/Microsoft.Edge/solutions/{}", "2024-08-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return None

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.solution_name = AAZStrArg(
            options=["-n", "--name", "--solution-name"],
            help="The name of the Solution",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]{3,24}$",
            ),
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.SolutionsDelete(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    class SolutionsDelete(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):

            request = self.client._request(
                "GET", self.url, self.query_parameters, self.header_parameters_list,
                None, self.form_content, None)
            sol_list_session = self.client.send_request(request=request, stream=False, **kwargs)
            if sol_list_session.http_response.status_code in [200]:

                data = self.deserialize_http_content(sol_list_session)
                sol_id = self.get_matched_sbs(data["id"], **kwargs)
                sol_versions = self.delete_solution_versions(**kwargs)
                self.delete_solution_bindings(sol_id, sol_versions, **kwargs)
                request = self.make_request()
                session = self.client.send_request(request=request, stream=False, **kwargs)
                if session.http_response.status_code in [200]:
                    return self.on_200(session)
                if session.http_response.status_code in [204]:
                    return self.on_204(session)
                return self.on_error(session.http_response)

        def delete_solution_bindings(self, sol_id,sol_versions, **kwargs):
            sbs = self.get_matched_sbs(sol_id, **kwargs)
            for sb in sbs:
                split = sb[1].split()
                dt_name = split[-1]
                self.delete_solution_instance(sol_versions, sb[0], **kwargs)
                self.delete_sb_config(sb[0], sol_versions, **kwargs)
                self.delete_dt_backfilled_config(dt_name, str(self.ctx.args.solution_name), **kwargs)
                request = self.client._request(
                    "DELETE", sb[0], self.query_parameters, self.header_parameters,
                    None, self.form_content, None)
                sb_delete_session = self.client.send_request(request=request, stream=False, **kwargs)
        def get_matched_sbs(self, sol_id, **kwargs):
            result = []
            list_url = "/subscriptions/" + str(self.ctx.subscription_id) + "/resourceGroups/" + str(
                self.ctx.args.resource_group) + "/providers/Microsoft.Edge/solutionBindings"
            request = self.client._request(
                "GET", list_url, self.query_parameters, self.header_parameters_list,
                None, self.form_content, None)
            sb_session = self.client.send_request(request=request, stream=False, **kwargs)
            if sb_session.http_response.status_code in [200]:
                data = self.deserialize_http_content(sb_session)
                sbs = data["value"]
                # #print(sbs)
                for sb in sbs:
                    # #print("++++++++++++++++++++++++++++++++++++++")
                    # #print(sb)
                    sol = sb["properties"]["solution"]
                    if sol == sol_id:
                        result.append((sb["id"],sb["properties"]["deploymentTarget"]))
            return result
        def delete_solution_versions(self, **kwargs):
            sol_versions = []
            sol_v_url = "/subscriptions/" + str(self.ctx.subscription_id) + "/resourceGroups/" + str(
                self.ctx.args.resource_group) + "/providers/Microsoft.Edge/solutions/" + str(
                self.ctx.args.solution_name) + "/versions"
            request = self.client._request(
                "GET", sol_v_url, self.query_parameters, self.header_parameters_list,
                None, self.form_content, None)
            list_session = self.client.send_request(request=request, stream=False, **kwargs)
            if list_session.http_response.status_code in [200]:
                data = self.deserialize_http_content(list_session)
                versions = data["value"]
                for version in versions:
                    sol_versions.append(version["name"])
                    version_id = version["id"]
                    #print("Deleting solution version: "+version_id)
                    request = self.client._request(
                        "DELETE", version_id, self.query_parameters, self.header_parameters,
                        None, self.form_content, None)
                    slv_delete_session = self.client.send_request(request=request, stream=False, **kwargs)
            return sol_versions

        def delete_solution_bindings(self, sb_id, **kwargs):

            request = self.client._request(
                "DELETE", sb_id, self.query_parameters, self.header_parameters,
                None, self.form_content, None)
            sb_delete_session = self.client.send_request(request=request, stream=False, **kwargs)

        def delete_dt_backfilled_config(self, dt_name, sol_name, **kwargs):
            config_name = dt_name
            if len(config_name) > 18:
                config_name = config_name[:18] + "Config"
            else:
                config_name = config_name + "Config"
            url = "/subscriptions/" + str(self.ctx.subscription_id) + "/resourceGroups/" + str(
                self.ctx.args.resource_group) + "/providers/Microsoft.Edge/configurations/" + config_name + "/DynamicConfigurations/" + sol_name + "/versions/version1"
            #print("Deleting backfilled config "+url)
            request = self.client._request(
                "DELETE", url, self.query_parameters, self.header_parameters,
                None, self.form_content, None)
            c_delete_session = self.client.send_request(request=request, stream=False, **kwargs)
        def delete_solution_instance(self, sb_id, sol_v,**kwargs):

            solution_instance_id = sb_id+"/solutionInstances/{}-1".format(
                sol_v.replace(".", "-"))
            #print("deleting solution instance "+solution_instance_id)
            request = self.client._request(
                "DELETE", solution_instance_id, self.query_parameters, self.header_parameters,
                None, self.form_content, None)
            si_delete_session = self.client.send_request(request=request, stream=False, **kwargs)
        def delete_sb_config(self, sb_id, sol_v,**kwargs):
            sb_configs_url = sb_id+"/solutionBindingConfigurations"

            request = self.client._request(
                "GET", sb_configs_url, self.query_parameters, self.header_parameters_list,
                None, self.form_content, None)
            list_session = self.client.send_request(request=request, stream=False, **kwargs)
            if list_session.http_response.status_code in [200]:
                data = self.deserialize_http_content(list_session)
                sb_configs = data["value"]
                for sb_config in sb_configs:
                    request = self.client._request(
                        "DELETE", sb_config["id"], self.query_parameters, self.header_parameters,
                        None, self.form_content, None)
                    sbc_delete_session = self.client.send_request(request=request, stream=False, **kwargs)


        def delete_site_config(self, sol_name, **kwargs):
            url = "/subscriptions/" + str(self.ctx.subscription_id) + "/resourceGroups/" + str(
                self.ctx.args.resource_group) + "/providers/Microsoft.Edge/sites"
            request = self.client._request(
                "GET", url, self.query_parameters_site, self.header_parameters_list,
                None, self.form_content, None)
            list_session = self.client.send_request(request=request, stream=False, **kwargs)
            if list_session.http_response.status_code in [200]:
                data = self.deserialize_http_content(list_session)
                sites = data["value"]
                for site in sites:
                    config_name = site["name"]
                    if len(config_name) > 18:
                        config_name = config_name[:18] + "Config"
                    else:
                        config_name = config_name + "Config"
                    url = "/subscriptions/" + str(self.ctx.subscription_id) + "/resourceGroups/" + str(
                    self.ctx.args.resource_group) + "/providers/Microsoft.Edge/configurations/" + config_name + "/DynamicConfigurations/" + sol_name + "/versions/version1"
                    #print("deleting site config " + url)
                    request = self.client._request(
                        "DELETE", url, self.query_parameters, self.header_parameters,
                        None, self.form_content, None)
                    session = self.client.send_request(request=request, stream=False, **kwargs)
        @property
        def header_parameters_list(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters
        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutions/{solutionName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "DELETE"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "solutionName", self.ctx.args.solution_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-08-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters_site(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-02-01-preview",
                    required=True,
                ),
            }
            return parameters

        def on_200(self, session):
            pass

        def on_204(self, session):
            pass


class _DeleteHelper:
    """Helper class for Delete"""


__all__ = ["Delete"]
