# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "config-manager solution deploy",
    is_preview=True,
)
class Deploy(AAZCommand):
    """Post request to deploy
    """

    _aaz_info = {
        "version": "2024-08-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/private.edge/solutionbindings/{}/deploy", "2024-08-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, None)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.solution_name = AAZStrArg(
            options=["--solution-name"],
            help="The name of the Solution",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]{3,24}$",
            ),
        )

        _args_schema.deployment_target = AAZStrArg(
            options=["--deployment-target-name"],
            help="The name of the Deployment Target",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]{3,24}$",
            ),
        )

        # define Arg Group "Body"

        _args_schema = cls._args_schema
        _args_schema.solution_version = AAZStrArg(
            options=["--solution-version"],
            arg_group="Body",
            help="Solution Version",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.SolutionBindingsDeploy(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    class SolutionBindingsDeploy(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    None,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Private.Edge/solutionBindings/{solutionBindingName}/deploy",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "solutionBindingName",
                    str(self.ctx.args.deployment_target) + "-" + str(self.ctx.args.solution_name),
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-08-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            solution_instance_id = "/subscriptions/{}/resourceGroups/{}/providers/Private.Edge/solutionBindings/{}/solutionInstances/{}-1".format(
                self.ctx.subscription_id,
                self.ctx.args.resource_group,
                str(self.ctx.args.deployment_target) + "-" + str(self.ctx.args.solution_name),
                str(self.ctx.args.solution_version).replace(".", "-"))
            _builder.set_const("id", solution_instance_id, AAZStrType, typ_kwargs={"flags": {"required": True}})
            bindiding_config = "/subscriptions/{}/resourceGroups/{}/providers/Private.Edge/solutionBindings/{}/solutionBindingConfigurations/{}-1".format(
                self.ctx.subscription_id,
                self.ctx.args.resource_group,
                str(self.ctx.args.deployment_target) + "-" + str(self.ctx.args.solution_name),
                str(self.ctx.args.solution_version).replace(".", "-"))
            solution_version = "/subscriptions/{}/resourceGroups/{}/providers/Private.Edge/solutions/{}/versions/{}".format(
                self.ctx.subscription_id, self.ctx.args.resource_group,
                self.ctx.args.solution_name,
                self.ctx.args.solution_version)
            _builder.set_prop("properties", AAZObjectType)
            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_const("solutionBindingConfigurationId", bindiding_config, AAZStrType,
                                     typ_kwargs={"flags": {"required": True}})
                properties.set_const("solutionVersionId", solution_version, AAZStrType,
                                     typ_kwargs={"flags": {"required": True}})
            return self.serialize_content(_content_value)


class _DeployHelper:
    """Helper class for Deploy"""


__all__ = ["Deploy"]
